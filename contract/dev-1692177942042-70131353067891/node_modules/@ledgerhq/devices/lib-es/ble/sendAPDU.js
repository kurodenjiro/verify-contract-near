var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Observable } from "rxjs";
import { log } from "@ledgerhq/logs";
const TagId = 0x05;
function chunkBuffer(buffer, sizeForIndex) {
    const chunks = [];
    for (let i = 0, size = sizeForIndex(0); i < buffer.length; i += size, size = sizeForIndex(i)) {
        chunks.push(buffer.slice(i, i + size));
    }
    return chunks;
}
export const sendAPDU = (write, apdu, mtuSize) => {
    const chunks = chunkBuffer(apdu, i => mtuSize - (i === 0 ? 5 : 3)).map((buffer, i) => {
        const head = Buffer.alloc(i === 0 ? 5 : 3);
        head.writeUInt8(TagId, 0);
        head.writeUInt16BE(i, 1);
        if (i === 0) {
            head.writeUInt16BE(apdu.length, 3);
        }
        return Buffer.concat([head, buffer]);
    });
    return new Observable(o => {
        let terminated = false;
        function main() {
            return __awaiter(this, void 0, void 0, function* () {
                for (const chunk of chunks) {
                    if (terminated)
                        return;
                    yield write(chunk);
                }
            });
        }
        main().then(() => {
            terminated = true;
            o.complete();
        }, e => {
            terminated = true;
            log("ble-error", "sendAPDU failure " + String(e));
            o.error(e);
        });
        const unsubscribe = () => {
            if (!terminated) {
                log("ble-verbose", "sendAPDU interruption");
                terminated = true;
            }
        };
        return unsubscribe;
    });
};
//# sourceMappingURL=sendAPDU.js.map