"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.receiveAPDU = void 0;
const errors_1 = require("@ledgerhq/errors");
const rxjs_1 = require("rxjs");
const logs_1 = require("@ledgerhq/logs");
const TagId = 0x05;
// operator that transform the input raw stream into one apdu response and finishes
const receiveAPDU = (rawStream) => rxjs_1.Observable.create(o => {
    let notifiedIndex = 0;
    let notifiedDataLength = 0;
    let notifiedData = Buffer.alloc(0);
    const sub = rawStream.subscribe({
        complete: () => {
            o.error(new errors_1.DisconnectedDevice());
            sub.unsubscribe();
        },
        error: e => {
            (0, logs_1.log)("ble-error", "in receiveAPDU " + String(e));
            o.error(e);
            sub.unsubscribe();
        },
        next: value => {
            const tag = value.readUInt8(0);
            const index = value.readUInt16BE(1);
            let data = value.slice(3);
            if (tag !== TagId) {
                o.error(new errors_1.TransportError("Invalid tag " + tag.toString(16), "InvalidTag"));
                return;
            }
            if (notifiedIndex !== index) {
                o.error(new errors_1.TransportError("BLE: Invalid sequence number. discontinued chunk. Received " +
                    index +
                    " but expected " +
                    notifiedIndex, "InvalidSequence"));
                return;
            }
            if (index === 0) {
                notifiedDataLength = data.readUInt16BE(0);
                data = data.slice(2);
            }
            notifiedIndex++;
            notifiedData = Buffer.concat([notifiedData, data]);
            if (notifiedData.length > notifiedDataLength) {
                o.error(new errors_1.TransportError("BLE: received too much data. discontinued chunk. Received " +
                    notifiedData.length +
                    " but expected " +
                    notifiedDataLength, "BLETooMuchData"));
                return;
            }
            if (notifiedData.length === notifiedDataLength) {
                o.next(notifiedData);
                o.complete();
                sub.unsubscribe();
            }
        },
    });
    return () => {
        sub.unsubscribe();
    };
});
exports.receiveAPDU = receiveAPDU;
//# sourceMappingURL=receiveAPDU.js.map